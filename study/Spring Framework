# Spring Framework 분석


#### 시작점
Was 실행 <= servlet 3.0에 정의됨.
```java
public interface ServletContainerInitializer {
  void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException;
}
```
기존 web.xml을 이용해 서블릿 컨텍스트를 초기화하던 작업을 대체.

jar 내부 META-INF/services/javax.servlet.ServletContainerInitializer 파일 안에 구현 클래스를 지정.
구현한 클래스에 @HandlesTypes를 사용하면, 안에 지정한 타입의 클래스를 모두 찾아 onStartup()의 파라미터로 넣어줌.
파라미터로 받은 Set<Class<?>>을 반복하여 WebApplicationInitializer로 생성해 Initializers list에 담음.
Initializers list를 정렬해 WebApplicationInitializer#onStartup 메소드를 실행.

ServletContainerInitializer 구현 클래스인 SpringServletContainerInitializer는 직접 서블릿 컨텍스트에 등록하지 않으나, 그 작업을 WebApplicationInitializer로 위임.
SpringServletContainerInitializer는 @Order 정보를 가지고 실행 순위를 조정해주는 정도.

WebApplicationInitializer를 만들어 앱 컨텍스트, 리스너, 서블릿 등에 등록하기.
@HandlesTypes은 설정정보 수집, 실제 등록될 서블릿, 필터가 소모할 대상
ServletContainerInitializer 구현 클래스에서 서블릿 컨텍스트 초기화.
=> Spring은 이를 직접 컨텍스트 초기화에 사용하도록 확장.
